# .gitlab-ci.yml
stages:
  # - test
  - build
  - deploy

# -----------------------------
# 1) OPA policy test (Dockerfile)
# -----------------------------
# opa_dockerfile_test:
#   stage: test
#   image: atlassian/default-image:2
#   services:
#     - name: docker:dind
#       command: ["--registry-mirror=https://registry-1.docker.io"]
#   variables:
#     DOCKER_HOST: tcp://docker:2375
#     DOCKER_TLS_CERTDIR: ""
#   script:
#     - sleep 1
#     - cd src/
#     - docker run --rm -v "$PWD":/project openpolicyagent/conftest:v0.59.0 test --policy Dockerfile-security.rego Dockerfile
#   only:
#     - master

# -----------------------------
# 2) Build & push image (manual)
# -----------------------------
build_gcp_prod:
  stage: build
  image: google/cloud-sdk:stable
  services:
    - name: docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    COMMIT_SHORT: "${CI_COMMIT_SHA:0:7}"
    STABLE_IMAGE: "$GCP_PRODUCTION_GCR/$GCP_PRODUCTION_PROJECT_ID/asaren-api/asaren-api:prod-${COMMIT_SHORT}"
  script:
    - cd src/
    - echo "$GCP_PRODUCTION_SERVICE_ACCOUNT" | base64 --decode > service-account.json
    - gcloud auth activate-service-account --key-file service-account.json
    - gcloud config set project "$GCP_PRODUCTION_PROJECT_ID"
    - gcloud auth configure-docker "$GCP_PRODUCTION_GCR" --quiet
    - docker build -t "$STABLE_IMAGE" .
    - docker push "$STABLE_IMAGE"
  only:
    - master
  when: manual

# -----------------------------
# 3) Deploy to GCP Production V1
# -----------------------------
deploy_prod_v1:
  stage: deploy
  image: google/cloud-sdk:latest
  variables:
    COMMIT_SHORT: "${CI_COMMIT_SHA:0:7}"
    IMAGE: "$GCP_PRODUCTION_GCR/$GCP_PRODUCTION_PROJECT_ID/asaren-api/asaren-api:prod-${COMMIT_SHORT}"
    DEPLOYMENT_NAME: "asaren-api"
    CONTAINER_NAME: "asaren-api"
  script:
    - echo "$GCP_PRODUCTION_SERVICE_ACCOUNT" | base64 --decode > service-account.json
    - gcloud auth activate-service-account --key-file service-account.json
    - gcloud config set project "$GCP_PRODUCTION_PROJECT_ID"
    - gcloud container clusters get-credentials "$GCP_PRODUCTION_GKE_CLUSTER" --region="$GCP_PRODUCTION_CLUSTER_REGION"
    - echo "$COMMIT_SHORT"
    - kubectl --namespace "$GCP_PRODUCTION_NAMESPACE" set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=$IMAGE
    - kubectl rollout status deployment/$DEPLOYMENT_NAME -n "$GCP_PRODUCTION_NAMESPACE" --timeout=600s
  needs: [build_gcp_prod]
  when: manual
  only:
    - master
  environment:
    name: gcp-asaren-production

# -----------------------------
# 4) Deploy to GCP Production V2
# -----------------------------
deploy_prod_v2:
  stage: deploy
  image: google/cloud-sdk:latest
  variables:
    COMMIT_SHORT: "${CI_COMMIT_SHA:0:7}"
    IMAGE: "$GCP_PRODUCTION_GCR/$GCP_PRODUCTION_PROJECT_ID/asaren-api/asaren-api:prod-${COMMIT_SHORT}"
    DEPLOYMENT_NAME: "asaren-api-v2"
    CONTAINER_NAME: "asaren-api-v2"
  script:
    - echo "$GCP_PRODUCTION_SERVICE_ACCOUNT" | base64 --decode > service-account.json
    - gcloud auth activate-service-account --key-file service-account.json
    - gcloud config set project "$GCP_PRODUCTION_PROJECT_ID"
    - gcloud container clusters get-credentials "$GCP_PRODUCTION_GKE_CLUSTER" --region="$GCP_PRODUCTION_CLUSTER_REGION"
    - echo "$COMMIT_SHORT"
    - kubectl --namespace "$GCP_PRODUCTION_NAMESPACE" set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=$IMAGE
    - kubectl rollout status deployment/$DEPLOYMENT_NAME -n "$GCP_PRODUCTION_NAMESPACE" --timeout=600s
  needs: [build_gcp_prod]
  when: manual
  only:
    - master
  environment:
    name: gcp-asaren-production-v2
